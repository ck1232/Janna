<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.JJ.dao.EmployeeSalaryMapper">
  <resultMap id="BaseResultMap" type="com.JJ.model.EmployeeSalary">
    <id column="salaryId" jdbcType="INTEGER" property="salaryid" />
    <result column="salaryDate" jdbcType="DATE" property="salarydate" />
    <result column="employeeId" jdbcType="INTEGER" property="employeeid" />
    <result column="basicSalaryAmount" jdbcType="DECIMAL" property="basicsalaryamount" />
    <result column="overtimeAmount" jdbcType="DECIMAL" property="overtimeamount" />
    <result column="overtimeHours" jdbcType="DECIMAL" property="overtimehours" />
    <result column="overtimeRemark" jdbcType="VARCHAR" property="overtimeremark" />
    <result column="allowance" jdbcType="DECIMAL" property="allowance" />
    <result column="unpaidLeaveAmount" jdbcType="DECIMAL" property="unpaidleaveamount" />
    <result column="unpaidLeaveRemark" jdbcType="VARCHAR" property="unpaidleaveremark" />
    <result column="employeeCPF" jdbcType="DECIMAL" property="employeecpf" />
    <result column="employerCPF" jdbcType="DECIMAL" property="employercpf" />
    <result column="cdacAmount" jdbcType="DECIMAL" property="cdacamount" />
    <result column="sdlAmount" jdbcType="DECIMAL" property="sdlamount" />
    <result column="fwLevy" jdbcType="DECIMAL" property="fwlevy" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="createdon" jdbcType="TIMESTAMP" property="createdon" />
    <result column="updatedon" jdbcType="TIMESTAMP" property="updatedon" />
    <result column="createdby" jdbcType="VARCHAR" property="createdby" />
    <result column="updatedby" jdbcType="VARCHAR" property="updatedby" />
    <result column="deleteInd" jdbcType="CHAR" property="deleteind" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    salaryId, salaryDate, employeeId, basicSalaryAmount, overtimeAmount, overtimeHours, 
    overtimeRemark, allowance, unpaidLeaveAmount, unpaidLeaveRemark, employeeCPF, employerCPF, 
    cdacAmount, sdlAmount, fwLevy, status, createdon, updatedon, createdby, updatedby, 
    deleteInd
  </sql>
  <select id="selectByExample" parameterType="com.JJ.model.EmployeeSalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employee_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employee_salary
    where salaryId = #{salaryid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee_salary
    where salaryId = #{salaryid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.JJ.model.EmployeeSalaryExample">
    delete from employee_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.JJ.model.EmployeeSalary" useGeneratedKeys="true" keyProperty="salaryid" keyColumn="salaryId">
    insert into employee_salary (salaryId, salaryDate, employeeId, 
      basicSalaryAmount, overtimeAmount, overtimeHours, 
      overtimeRemark, allowance, unpaidLeaveAmount, 
      unpaidLeaveRemark, employeeCPF, employerCPF, 
      cdacAmount, sdlAmount, fwLevy, 
      status, createdon, updatedon, 
      createdby, updatedby, deleteInd
      )
    values (#{salaryid,jdbcType=INTEGER}, #{salarydate,jdbcType=DATE}, #{employeeid,jdbcType=INTEGER}, 
      #{basicsalaryamount,jdbcType=DECIMAL}, #{overtimeamount,jdbcType=DECIMAL}, #{overtimehours,jdbcType=DECIMAL}, 
      #{overtimeremark,jdbcType=VARCHAR}, #{allowance,jdbcType=DECIMAL}, #{unpaidleaveamount,jdbcType=DECIMAL}, 
      #{unpaidleaveremark,jdbcType=VARCHAR}, #{employeecpf,jdbcType=DECIMAL}, #{employercpf,jdbcType=DECIMAL}, 
      #{cdacamount,jdbcType=DECIMAL}, #{sdlamount,jdbcType=DECIMAL}, #{fwlevy,jdbcType=DECIMAL}, 
      #{status,jdbcType=VARCHAR}, #{createdon,jdbcType=TIMESTAMP}, #{updatedon,jdbcType=TIMESTAMP}, 
      #{createdby,jdbcType=VARCHAR}, #{updatedby,jdbcType=VARCHAR}, #{deleteind,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.JJ.model.EmployeeSalary">
    insert into employee_salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salaryid != null">
        salaryId,
      </if>
      <if test="salarydate != null">
        salaryDate,
      </if>
      <if test="employeeid != null">
        employeeId,
      </if>
      <if test="basicsalaryamount != null">
        basicSalaryAmount,
      </if>
      <if test="overtimeamount != null">
        overtimeAmount,
      </if>
      <if test="overtimehours != null">
        overtimeHours,
      </if>
      <if test="overtimeremark != null">
        overtimeRemark,
      </if>
      <if test="allowance != null">
        allowance,
      </if>
      <if test="unpaidleaveamount != null">
        unpaidLeaveAmount,
      </if>
      <if test="unpaidleaveremark != null">
        unpaidLeaveRemark,
      </if>
      <if test="employeecpf != null">
        employeeCPF,
      </if>
      <if test="employercpf != null">
        employerCPF,
      </if>
      <if test="cdacamount != null">
        cdacAmount,
      </if>
      <if test="sdlamount != null">
        sdlAmount,
      </if>
      <if test="fwlevy != null">
        fwLevy,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createdon != null">
        createdon,
      </if>
      <if test="updatedon != null">
        updatedon,
      </if>
      <if test="createdby != null">
        createdby,
      </if>
      <if test="updatedby != null">
        updatedby,
      </if>
      <if test="deleteind != null">
        deleteInd,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salaryid != null">
        #{salaryid,jdbcType=INTEGER},
      </if>
      <if test="salarydate != null">
        #{salarydate,jdbcType=DATE},
      </if>
      <if test="employeeid != null">
        #{employeeid,jdbcType=INTEGER},
      </if>
      <if test="basicsalaryamount != null">
        #{basicsalaryamount,jdbcType=DECIMAL},
      </if>
      <if test="overtimeamount != null">
        #{overtimeamount,jdbcType=DECIMAL},
      </if>
      <if test="overtimehours != null">
        #{overtimehours,jdbcType=DECIMAL},
      </if>
      <if test="overtimeremark != null">
        #{overtimeremark,jdbcType=VARCHAR},
      </if>
      <if test="allowance != null">
        #{allowance,jdbcType=DECIMAL},
      </if>
      <if test="unpaidleaveamount != null">
        #{unpaidleaveamount,jdbcType=DECIMAL},
      </if>
      <if test="unpaidleaveremark != null">
        #{unpaidleaveremark,jdbcType=VARCHAR},
      </if>
      <if test="employeecpf != null">
        #{employeecpf,jdbcType=DECIMAL},
      </if>
      <if test="employercpf != null">
        #{employercpf,jdbcType=DECIMAL},
      </if>
      <if test="cdacamount != null">
        #{cdacamount,jdbcType=DECIMAL},
      </if>
      <if test="sdlamount != null">
        #{sdlamount,jdbcType=DECIMAL},
      </if>
      <if test="fwlevy != null">
        #{fwlevy,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createdon != null">
        #{createdon,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedon != null">
        #{updatedon,jdbcType=TIMESTAMP},
      </if>
      <if test="createdby != null">
        #{createdby,jdbcType=VARCHAR},
      </if>
      <if test="updatedby != null">
        #{updatedby,jdbcType=VARCHAR},
      </if>
      <if test="deleteind != null">
        #{deleteind,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.JJ.model.EmployeeSalaryExample" resultType="java.lang.Integer">
    select count(*) from employee_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employee_salary
    <set>
      <if test="record.salaryid != null">
        salaryId = #{record.salaryid,jdbcType=INTEGER},
      </if>
      <if test="record.salarydate != null">
        salaryDate = #{record.salarydate,jdbcType=DATE},
      </if>
      <if test="record.employeeid != null">
        employeeId = #{record.employeeid,jdbcType=INTEGER},
      </if>
      <if test="record.basicsalaryamount != null">
        basicSalaryAmount = #{record.basicsalaryamount,jdbcType=DECIMAL},
      </if>
      <if test="record.overtimeamount != null">
        overtimeAmount = #{record.overtimeamount,jdbcType=DECIMAL},
      </if>
      <if test="record.overtimehours != null">
        overtimeHours = #{record.overtimehours,jdbcType=DECIMAL},
      </if>
      <if test="record.overtimeremark != null">
        overtimeRemark = #{record.overtimeremark,jdbcType=VARCHAR},
      </if>
      <if test="record.allowance != null">
        allowance = #{record.allowance,jdbcType=DECIMAL},
      </if>
      <if test="record.unpaidleaveamount != null">
        unpaidLeaveAmount = #{record.unpaidleaveamount,jdbcType=DECIMAL},
      </if>
      <if test="record.unpaidleaveremark != null">
        unpaidLeaveRemark = #{record.unpaidleaveremark,jdbcType=VARCHAR},
      </if>
      <if test="record.employeecpf != null">
        employeeCPF = #{record.employeecpf,jdbcType=DECIMAL},
      </if>
      <if test="record.employercpf != null">
        employerCPF = #{record.employercpf,jdbcType=DECIMAL},
      </if>
      <if test="record.cdacamount != null">
        cdacAmount = #{record.cdacamount,jdbcType=DECIMAL},
      </if>
      <if test="record.sdlamount != null">
        sdlAmount = #{record.sdlamount,jdbcType=DECIMAL},
      </if>
      <if test="record.fwlevy != null">
        fwLevy = #{record.fwlevy,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.createdon != null">
        createdon = #{record.createdon,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedon != null">
        updatedon = #{record.updatedon,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdby != null">
        createdby = #{record.createdby,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedby != null">
        updatedby = #{record.updatedby,jdbcType=VARCHAR},
      </if>
      <if test="record.deleteind != null">
        deleteInd = #{record.deleteind,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employee_salary
    set salaryId = #{record.salaryid,jdbcType=INTEGER},
      salaryDate = #{record.salarydate,jdbcType=DATE},
      employeeId = #{record.employeeid,jdbcType=INTEGER},
      basicSalaryAmount = #{record.basicsalaryamount,jdbcType=DECIMAL},
      overtimeAmount = #{record.overtimeamount,jdbcType=DECIMAL},
      overtimeHours = #{record.overtimehours,jdbcType=DECIMAL},
      overtimeRemark = #{record.overtimeremark,jdbcType=VARCHAR},
      allowance = #{record.allowance,jdbcType=DECIMAL},
      unpaidLeaveAmount = #{record.unpaidleaveamount,jdbcType=DECIMAL},
      unpaidLeaveRemark = #{record.unpaidleaveremark,jdbcType=VARCHAR},
      employeeCPF = #{record.employeecpf,jdbcType=DECIMAL},
      employerCPF = #{record.employercpf,jdbcType=DECIMAL},
      cdacAmount = #{record.cdacamount,jdbcType=DECIMAL},
      sdlAmount = #{record.sdlamount,jdbcType=DECIMAL},
      fwLevy = #{record.fwlevy,jdbcType=DECIMAL},
      status = #{record.status,jdbcType=VARCHAR},
      createdon = #{record.createdon,jdbcType=TIMESTAMP},
      updatedon = #{record.updatedon,jdbcType=TIMESTAMP},
      createdby = #{record.createdby,jdbcType=VARCHAR},
      updatedby = #{record.updatedby,jdbcType=VARCHAR},
      deleteInd = #{record.deleteind,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.JJ.model.EmployeeSalary">
    update employee_salary
    <set>
      <if test="salarydate != null">
        salaryDate = #{salarydate,jdbcType=DATE},
      </if>
      <if test="employeeid != null">
        employeeId = #{employeeid,jdbcType=INTEGER},
      </if>
      <if test="basicsalaryamount != null">
        basicSalaryAmount = #{basicsalaryamount,jdbcType=DECIMAL},
      </if>
      <if test="overtimeamount != null">
        overtimeAmount = #{overtimeamount,jdbcType=DECIMAL},
      </if>
      <if test="overtimehours != null">
        overtimeHours = #{overtimehours,jdbcType=DECIMAL},
      </if>
      <if test="overtimeremark != null">
        overtimeRemark = #{overtimeremark,jdbcType=VARCHAR},
      </if>
      <if test="allowance != null">
        allowance = #{allowance,jdbcType=DECIMAL},
      </if>
      <if test="unpaidleaveamount != null">
        unpaidLeaveAmount = #{unpaidleaveamount,jdbcType=DECIMAL},
      </if>
      <if test="unpaidleaveremark != null">
        unpaidLeaveRemark = #{unpaidleaveremark,jdbcType=VARCHAR},
      </if>
      <if test="employeecpf != null">
        employeeCPF = #{employeecpf,jdbcType=DECIMAL},
      </if>
      <if test="employercpf != null">
        employerCPF = #{employercpf,jdbcType=DECIMAL},
      </if>
      <if test="cdacamount != null">
        cdacAmount = #{cdacamount,jdbcType=DECIMAL},
      </if>
      <if test="sdlamount != null">
        sdlAmount = #{sdlamount,jdbcType=DECIMAL},
      </if>
      <if test="fwlevy != null">
        fwLevy = #{fwlevy,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createdon != null">
        createdon = #{createdon,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedon != null">
        updatedon = #{updatedon,jdbcType=TIMESTAMP},
      </if>
      <if test="createdby != null">
        createdby = #{createdby,jdbcType=VARCHAR},
      </if>
      <if test="updatedby != null">
        updatedby = #{updatedby,jdbcType=VARCHAR},
      </if>
      <if test="deleteind != null">
        deleteInd = #{deleteind,jdbcType=CHAR},
      </if>
    </set>
    where salaryId = #{salaryid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.JJ.model.EmployeeSalary">
    update employee_salary
    set salaryDate = #{salarydate,jdbcType=DATE},
      employeeId = #{employeeid,jdbcType=INTEGER},
      basicSalaryAmount = #{basicsalaryamount,jdbcType=DECIMAL},
      overtimeAmount = #{overtimeamount,jdbcType=DECIMAL},
      overtimeHours = #{overtimehours,jdbcType=DECIMAL},
      overtimeRemark = #{overtimeremark,jdbcType=VARCHAR},
      allowance = #{allowance,jdbcType=DECIMAL},
      unpaidLeaveAmount = #{unpaidleaveamount,jdbcType=DECIMAL},
      unpaidLeaveRemark = #{unpaidleaveremark,jdbcType=VARCHAR},
      employeeCPF = #{employeecpf,jdbcType=DECIMAL},
      employerCPF = #{employercpf,jdbcType=DECIMAL},
      cdacAmount = #{cdacamount,jdbcType=DECIMAL},
      sdlAmount = #{sdlamount,jdbcType=DECIMAL},
      fwLevy = #{fwlevy,jdbcType=DECIMAL},
      status = #{status,jdbcType=VARCHAR},
      createdon = #{createdon,jdbcType=TIMESTAMP},
      updatedon = #{updatedon,jdbcType=TIMESTAMP},
      createdby = #{createdby,jdbcType=VARCHAR},
      updatedby = #{updatedby,jdbcType=VARCHAR},
      deleteInd = #{deleteind,jdbcType=CHAR}
    where salaryId = #{salaryid,jdbcType=INTEGER}
  </update>
</mapper>